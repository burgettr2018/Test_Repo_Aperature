@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}


@mixin translateY($args) {
  -webkit-transform: translateY($args);
  -ms-transform: translateY($args);
  transform: translateY($args);
}
@mixin translateX($args) {
  -webkit-transform: translateX($args);
  -ms-transform: translateX($args);
  transform: translateX($args);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  transform: translate($x, $y);
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}


//transition
@mixin transition($args) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/*
USAGE

a {
  color: gray;
  @include transition(color .3s ease);
  &:hover {
    color: black;
  }
}
*/

//cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/*
.faded-text {
  @include opacity(0.8);
}
*/



// -----------------------------
// arrows
// -----------------------------

// $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// $color: hex, rgb or rbga
// $size: px or em
// $position: true or false - optional (move to overhanging centered edge, message box style)
// @example
// .element{
//   @include arrow(top, #000, 50px, true);
// }

@mixin arrow($direction, $color, $size, $position: false) {
  display: block;
  height: 0;
  width: 0;

  @if $position == true {
    content: "";
    position: absolute;

    @if $direction == "top" {
      bottom: 100%;
      left: 50%;
      margin-left: (-$size);
    } @else if $direction == "bottom" {
      top: 100%;
      left: 50%;
      margin-left: (-$size);
    } @else if $direction == "left" {
      right: 100%;
      top: 50%;
      margin-top: (-$size);
    } @else if $direction == "right" {
      left: 100%;
      top: 50%;
      margin-top: (-$size);
    }
  }

  @if $direction == "top" {
    border-top: $size solid transparent;
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  } @else if $direction == "right" {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == "bottom" {
    border-top: $size solid $color;
    border-bottom: $size solid transparent;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  } @else if $direction == "left" {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid transparent;
    border-right: $size solid $color;
  } @else if $direction == "top-left" {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == "top-right" {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  } @else if $direction == "bottom-left" {
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == "bottom-right" {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
}


@mixin ghostVerticalAlign(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

@mixin box-shadow($args) {
  -webkit-box-shadow: $args;
  -moz-box-shadow: $args;
  box-shadow: $args;
}


//retina images
@mixin image-2x($image) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
  }
}

/*
USAGE

div.logo {
   background: url("logo.png") no-repeat;
   @include image-2x("logo2x.png", 100px, 25px);
 }
*/